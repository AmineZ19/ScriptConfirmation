const CONFIG = {
  API_URL_CREATE: 'https://app.noest-dz.com/api/public/create/order',
  API_URL_DELETE: 'https://app.noest-dz.com/api/public/delete/order',
  WILAYA_ID: 19,
  STATION_CODE: '19A',
  COMMUNE: 'Sétif',
  ADRESSE: 'Sétif'
};

const MAX_EXECUTION_TIME = 5 * 60 * 1000; // 5 minutes
const MAX_RETRIES = 3;

function traiterCommandesNoest() {
  // Retrieve API_TOKEN and USER_GUID from Script Properties
  const properties = PropertiesService.getScriptProperties();
  const API_TOKEN = properties.getProperty('TOKEN_NOEST');
  const USER_GUID = properties.getProperty('GUID_NOEST');

  // Check for missing properties
  if (!API_TOKEN || !USER_GUID) {
    return;
  }

  const feuille = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('Suivie');
  const lastRow = feuille.getLastRow();
  if (lastRow < 2) {
    return;
  }

  // Fetch only required columns (C, G, H, U, V)
  const donnees = feuille.getRange(2, 3, lastRow - 1, 20).getValues();
  // Initialize updates array with existing U (status) and V (tracking)
  const updates = donnees.map(row => [row[18], row[19]]); // U: ligne[18], V: ligne[19]
  const modifiedRows = new Set(); // Track rows that are modified
  const startTime = new Date();

  const baseOptions = {
    method: 'post',
    contentType: 'application/json',
    muteHttpExceptions: true
  };

  for (let i = 0; i < donnees.length; i++) {
    if (new Date() - startTime > MAX_EXECUTION_TIME) {
      break;
    }

    const ligne = donnees[i];
    const statut = ligne[18]; // Colonne U (index 18 in 0-based donnees)
    const tracking = ligne[19]; // Colonne V (index 19 in 0-based donnees)

    if (tracking && statut !== 'Delete') continue;

    if (statut === 'Tester') {
      const nomPrenom = ligne[0]; // Colonne C
      const telephone = (ligne[4] + '').replace(/\s/g, ''); // Colonne G
      const produit = ligne[5]; // Colonne H
      const telFormate = telephone.startsWith('0') ? telephone : '0' + telephone;

      const payload = {
        api_token: API_TOKEN,
        user_guid: USER_GUID,
        reference: 'XXXXXX',
        client: nomPrenom,
        phone: telFormate,
        adresse: CONFIG.ADRESSE,
        wilaya_id: CONFIG.WILAYA_ID,
        commune: CONFIG.COMMUNE,
        montant: 0,
        remarque: 'Test Num',
        produit: produit,
        type_id: 1,
        poids: 1,
        stop_desk: 1,
        station_code: CONFIG.STATION_CODE,
        stock: 0,
        can_open: 1
      };

      let retries = 0;
      while (retries < MAX_RETRIES) {
        try {
          const options = { ...baseOptions, payload: JSON.stringify(payload) };
          const response = UrlFetchApp.fetch(CONFIG.API_URL_CREATE, options);
          const result = JSON.parse(response.getContentText());
          
          if (result.success) {
            updates[i][1] = result.tracking; // V (Column V)
            // Do not modify U (Column U), keep 'Tester'
            modifiedRows.add(i);
            break;
          } else {
            updates[i][1] = result.message || JSON.stringify(result);
            modifiedRows.add(i);
            break;
          }
        } catch (e) {
          retries++;
          if (retries === MAX_RETRIES) {
            updates[i][1] = `Erreur réseau après ${retries} tentatives: ${e.message}`;
            modifiedRows.add(i);
          }
          Utilities.sleep(1000 * retries);
        }
      }
    } else if (statut === 'Delete' && tracking) {
      const payload = {
        api_token: API_TOKEN,
        user_guid: USER_GUID,
        tracking: tracking
      };

      let retries = 0;
      while (retries < MAX_RETRIES) {
        try {
          const options = { ...baseOptions, payload: JSON.stringify(payload) };
          const response = UrlFetchApp.fetch(CONFIG.API_URL_DELETE, options);
          const result = JSON.parse(response.getContentText());
          
          if (result.success) {
            updates[i][0] = ''; // Clear U (remove 'Delete')
            updates[i][1] = ''; // Clear V (remove tracking)
            modifiedRows.add(i);
            break;
          } else {
            updates[i][1] = 'Erreur suppression';
            modifiedRows.add(i);
            break;
          }
        } catch (e) {
          retries++;
          if (retries === MAX_RETRIES) {
            updates[i][1] = `Erreur réseau après ${retries} tentatives: ${e.message}`;
            modifiedRows.add(i);
          }
          Utilities.sleep(1000 * retries);
        }
      }
    } else if (statut === 'Delete' && !tracking) {
      updates[i][1] = 'Aucun tracking';
      modifiedRows.add(i);
    }
  }

  // Batch update only modified rows
  if (modifiedRows.size > 0) {
    const sortedRows = Array.from(modifiedRows).sort((a, b) => a - b);
    const ranges = [];
    let startIdx = sortedRows[0];
    let currentRange = [updates[startIdx]];

    for (let i = 1; i < sortedRows.length; i++) {
      const idx = sortedRows[i];
      if (idx === startIdx + currentRange.length) {
        currentRange.push(updates[idx]);
      } else {
        ranges.push({ start: startIdx, data: currentRange });
        startIdx = idx;
        currentRange = [updates[idx]];
      }
    }
    ranges.push({ start: startIdx, data: currentRange });

    ranges.forEach(range => {
      feuille.getRange(2 + range.start, 21, range.data.length, 2).setValues(range.data);
    });
  }
}
